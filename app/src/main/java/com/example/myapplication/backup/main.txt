package com.example.myapplication

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape

import androidx.compose.material.Text
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.myapplication.ui.theme.*

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            Calculator()
        }
    }


    @Composable
    fun Greeting(name: String) {
        Text(text = "Hello $name!")
    }

    @Preview(showBackground = true)
    @Composable
    fun DefaultPreview() {
        MyApplicationTheme {
            Greeting("Android")
        }
    }

    val buttons = arrayOf(
        arrayOf("AC" to LG4, "+/-" to LG4, "%" to LG4, "/" to O2),
        arrayOf("7" to G3, "8" to G3, "9" to G3, "x" to O2),
        arrayOf("4" to G3, "5" to G3, "6" to G3, "-" to O2),
        arrayOf("1" to G3, "2" to G3, "3" to G3, "+" to O2),
        arrayOf("0" to G3, "." to G3, "=" to O2)
    )

    @Preview(showSystemUi = true)
    @Composable
    fun Calculator() {
        var state by remember {
            mutableStateOf(CalculatorSate())
        }
        Column(
            Modifier
                .background(B1)
                .padding(horizontal = 10.dp)
        ) {
            Box(
                Modifier
                    .fillMaxHeight(0.3f)
                    .fillMaxWidth(),
                contentAlignment = Alignment.BottomEnd
            )
            {
                Text("${state.n2}", fontSize = 100.sp, color = Color.White)
            }
            Column(Modifier.fillMaxSize()) {
                buttons.forEach {
                    Row(
                        Modifier.weight(1f),
                        horizontalArrangement = Arrangement.spacedBy(10.dp)
                    ) {
                        it.forEach {
                            CalculatorButton(
                                Modifier
                                    .weight(if (it.first == "0") 2f else 1f)
                                    .aspectRatio(if (it.first == "0") 2f else 1f)
                                    .background(it.second),
                                it.first
                            ) {
                                state = calculator(state, it.first)
                            }
                        }
                    }
                }
            }
        }
    }

    fun calculator(state: CalculatorSate, input: String): CalculatorSate {
        return when (input) {
            in "0".."9" -> {
//                val temp=countNum2(state.n1,input.toInt())
                state.copy(
                    n1 =state.n2,
                    n2 = input.toInt(),
                )}
            in arrayOf("+", "-", "x", "/") -> state.copy(opt = input)
            "=" -> when (state.opt) {
                "+" -> state.copy(n2 = state.n1 + state.n2)
                "-" -> state.copy(n2 = state.n1 - state.n2)
                "x" -> state.copy(n2 = state.n1 * state.n2)
                "/" -> state.copy(n2 = state.n1 / state.n2)
                else -> state
            }
            else -> state
        }
    }

    @Composable
    fun CalculatorButton(modifier: Modifier, symbol: String, onClick: () -> Unit = {}) {
        Box(
            Modifier
                .clip(CircleShape)
                .then(modifier)
                /*.background(Color.Blue)*/
                .clickable { onClick.invoke() },
            contentAlignment = Alignment.Center
        ) {
            Text(symbol, fontSize = 40.sp, color = Color.White)
        }
    }

    data class CalculatorSate(val n1: Int = 0, val n2: Int = 0, val opt: String? = null)
}

